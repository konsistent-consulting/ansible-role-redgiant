- name: Display Application Details
  ansible.builtin.debug:
    msg: |
      Windows installation of {{ product_name }}
      Download URL: {{ download_url }}
      Version: {{ effective_version }}
      Major Version: {{ major_ver }}

################################################################################
# Extract filename and file extension details
################################################################################

- name: Extract filename from download URL
  ansible.builtin.set_fact:
    installer_file_name: "{{ (download_url | urlsplit('path')) | basename }}"

- name: Extract file extension from download URL
  ansible.builtin.set_fact:
    download_file_extention: "{{ ((download_url | urlsplit('path')) | splitext | last) }}"

- name: Extract file extension from download URL
  ansible.builtin.set_fact:
    installer_file_extention: "{{ installer | splitext | last }}"

- name: Check if download file extension is zip
  ansible.builtin.set_fact:
    is_zip: "{{ (download_file_extention | lower) == '.zip' }}"

- name: Check if installer is MSI
  ansible.builtin.set_fact:
    is_msi: "{{ (installer_file_extention | lower) == '.msi' }}"

- name: Check if installer is EXE
  ansible.builtin.set_fact:
    is_exe: "{{ (installer_file_extention | lower) == '.exe' }}"

################################################################################
# Run a pre installation check to see if the application is installed
################################################################################

- name: Get installed applications (registry 32/64-bit)
  ansible.windows.win_shell: |
      Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*,
                        HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* |
      Select-Object DisplayName, DisplayVersion |
      Where-Object { $_.DisplayName } |
      ConvertTo-Json -Depth 3
  register: installed_apps_list

- name: Parse installed apps JSON
  set_fact:
    _apps_raw: "{{ installed_apps_list.stdout | from_json }}"

- name: Normalize installed apps to a list
  set_fact:
    installed_apps: "{{ _apps_raw if _apps_raw is sequence else [_apps_raw] }}"

- name: Sort apps by name
  set_fact:
    installed_apps_sorted: >-
      {{ installed_apps
         | selectattr('DisplayName', 'defined')
         | selectattr('DisplayName', 'truthy')
         | sort(attribute='DisplayName') | list }}

- name: Build neat list
  set_fact:
    apps_table: |-
      {{ '%-70s %-20s'|format('Application','Version') }}
      {{ '-' * 92 }}
      {% for app in installed_apps_sorted %}
      {{ '%-70s %-20s'|format(app.DisplayName | default(''), app.DisplayVersion | default('')) }}
      {% endfor %}

- name: Show table of apps
  debug:
    msg: "{{ apps_table }}"

- name: Search for matching app
  ansible.windows.win_powershell:
    script: |
      $apps = @'
      {{ installed_apps_list.stdout }}
      '@ | ConvertFrom-Json

      $name    = {{ product_name | to_json }}
      $version = {{ effective_version | to_json }}

      $match = $apps | Where-Object {
        ($_.DisplayName    -like ("*" + $name + "*")) -and
        (($_.DisplayVersion) -as [string]) -like ("*" + $version + "*")
      }

      if ($match) { 'True' } else { 'False' }
  register: search_result
  changed_when: false

- name: Set installation_success to true/false
  ansible.builtin.set_fact:
    installation_success: "{{ (search_result.output | default([]) | join('') | trim | lower) == 'true' }}"

- name: Report if {{ product_name }} {{ effective_version }} is installed
  ansible.builtin.debug:
    msg: "{{ product_name }} {{ effective_version }} is installed: {{ installation_success }}."

################################################################################
# Download and install the application if installation_success is False
################################################################################

- name: Create temporary directory for {{ product_name }} {{ effective_version }}
  ansible.windows.win_tempfile:
    state: directory
  register: temp_dir
  when: not installation_success

- name: Download {{ product_name }}
  when: not installation_success
  block:

    - name: Try to fetch SHA1 for {{ product_name }} {{ effective_version }}
      ansible.builtin.uri:
        url: "{{ download_url }}.sha1"
        method: GET
        return_content: true
        follow_redirects: all
        url_username: "{{ repository_username | default(omit) }}"
        url_password: "{{ repository_password | default(omit) }}"
        force_basic_auth: false
        validate_certs: true
      register: sha1_resp
      failed_when: false
      changed_when: false
      delegate_to: localhost
      no_log: true

    - name: Clear any previous SHA1
      ansible.builtin.set_fact:
        product_sha1: null
      when: not installation_success

    - name: Extract SHA1 if present
      ansible.builtin.set_fact:
        product_sha1: >-
          {{ (sha1_resp.status|default(0) == 200 and (sha1_resp.content | trim) is match('^[a-fA-F0-9]{40}$'))
             | ternary(sha1_resp.content | trim, none) }}
      when: sha1_resp is defined

    - name: Authenticated download
      ansible.windows.win_get_url:
        url: "{{ download_url }}"
        dest: "{{ temp_dir.path }}\\{{ installer_file_name }}"
        url_username: "{{ repository_username | default(omit) }}"
        url_password: "{{ repository_password | default(omit) }}"
        force_basic_auth: false
        force: true
        follow_redirects: all
        checksum_algorithm: "{{ 'sha1' if (product_sha1 is defined) else omit }}"
        checksum: "{{ product_sha1 | default(omit) }}"
      register: product_downloaded
      no_log: true

  rescue:

    - name: Anonymous download
      ansible.windows.win_get_url:
        url: "{{ download_url }}"
        dest: "{{ temp_dir.path }}\\{{ installer_file_name }}"
        force: true
        follow_redirects: all
      register: product_downloaded_fallback

  always:

    - name: Pick which download worked
      ansible.builtin.set_fact:
        final_download_result: "{{ product_downloaded if (product_downloaded is defined) else product_downloaded_fallback }}"

- name: Extract {{ temp_dir.path }}\{{ installer_file_name }}
  ansible.windows.win_powershell:
    script: |
      $src  = "{{ temp_dir.path }}\{{ installer_file_name }}"
      $dest = "{{ temp_dir.path }}"
      if (-not (Test-Path -LiteralPath $dest)) {
        New-Item -ItemType Directory -Path $dest | Out-Null
      }
      if (Get-Command Expand-Archive -ErrorAction SilentlyContinue) {
        Expand-Archive -LiteralPath $src -DestinationPath $dest -Force
      } else {
        Add-Type -AssemblyName System.IO.Compression.FileSystem
        [IO.Compression.ZipFile]::ExtractToDirectory($src, $dest, $true)
      }
  register: unzip_result
  when:
    - not installation_success
    - final_download_result is succeeded
    - is_zip
    - installer_file_name | length > 0

- name: Locate installer {{ installer }}
  ansible.windows.win_find:
    paths:
      - "{{ temp_dir.path }}"
    patterns:
      - "{{ installer }}"
    recurse: yes
    file_type: file
  register: product_found
  when:
    - not installation_success
    - final_download_result is succeeded

- name: Pick the installer path
  ansible.builtin.set_fact:
    installer_path: "{{ (product_found.files | map(attribute='path') | list | first) | default('') }}"
  when:
    - not installation_success
    - final_download_result is succeeded

- name: Display the {{ product_name }} {{ effective_version }} installer file
  ansible.builtin.debug:
    msg:
      - "Found {{ product_found.files | length }} installer(s)"
      - "Selected installer: {{ installer_path }}"
  when:
    - not installation_success
    - final_download_result is succeeded

- name: Display the installation command
  ansible.builtin.debug:
    msg: >-
      "{{ installer_path }}" {{ arguments | default('') | trim }}
  when:
    - not installation_success
    - final_download_result is succeeded

- name: Install EXE {{ product_name }} {{ effective_version }}
  ansible.windows.win_command: >
    "{{ installer_path }}" {{ arguments | default('') | trim }}
  args:
    chdir: "{{ temp_dir.path }}"
  async: 2400
  poll: 30
  register: product_install
  when:
    - not installation_success
    - installer_path | length > 0
    - is_exe

- name: Install MSI {{ product_name }} {{ effective_version }}
  ansible.windows.win_package:
    path: "{{ installer_path }}"
    arguments: "{{ arguments | default('') | trim }}"
    state: present
  async: 2400
  poll: 30
  register: product_install
  when:
    - not installation_success
    - installer_path | length > 0
    - is_msi

################################################################################
# Post installation check to confirm the correct application has installed
################################################################################

- name: Get installed applications (registry 32/64-bit)
  ansible.windows.win_shell: |
      Get-ItemProperty HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*,
                        HKLM:\Software\WOW6432Node\Microsoft\Windows\CurrentVersion\Uninstall\* |
      Select-Object DisplayName, DisplayVersion |
      Where-Object { $_.DisplayName } |
      ConvertTo-Json -Depth 3
  register: installed_apps_list

- name: Search for matching app
  ansible.windows.win_powershell:
    script: |
      $apps = @'
      {{ installed_apps_list.stdout }}
      '@ | ConvertFrom-Json

      $name    = {{ product_name | to_json }}
      $version = {{ version_major | to_json }}

      $match = $apps | Where-Object {
        ($_.DisplayName    -like ("*" + $name + "*")) -and
        (($_.DisplayVersion) -as [string]) -like ("*" + $version + "*")
      }

      if ($match) { 'True' } else { 'False' }
  register: search_result
  changed_when: false

- name: Set installation_success to true/false
  ansible.builtin.set_fact:
    installation_success: "{{ (search_result.output | default([]) | join('') | trim | lower) == 'true' }}"

- name: Remove temp dir for {{ product_name }} {{ effective_version }}
  ansible.windows.win_file:
    path: "{{ temp_dir.path }}"
    state: absent
  when:
    - temp_dir is defined
    - temp_dir.path is defined
    - installation_success
  ignore_errors: true

- name: Report if {{ product_name }} {{ effective_version }} is installed
  ansible.builtin.debug:
    msg: "{{ product_name }} {{ effective_version }} is installed: {{ installation_success }}."
